package musaico.foundation.domains.iterators;

import java.io.Serializable;

import java.util.Iterator;


import musaico.foundation.domains.ClassName;
import musaico.foundation.domains.Generator;


/**
 * <p>
 * Iterates through the elements generated by a Generator.
 * </p>
 *
 *
 * <br> </br>
 * <br> </br>
 *
 * <hr> </hr>
 *
 * <br> </br>
 * <br> </br>
 *
 *
 * <p>
 * For copyright and licensing information refer to:
 * </p>
 *
 * @see musaico.foundation.domains.iterators.MODULE#COPYRIGHT
 * @see musaico.foundation.domains.iterators.MODULE#LICENSE
 */
public class GeneratorIterator<ELEMENT extends Object>
    implements IndexedIterator<ELEMENT>, Serializable
{
    /** The MusaicoModule to which this class or interface belongs. */
    public static final MODULE PARENT_MODULE = MODULE.MODULE;

    /** The version of the parent module, YYYYMMDD format. */
    private static final long serialVersionUID = MODULE.VERSION;


    // The Generator whose generated elements we will iterate over.
    private final Generator<ELEMENT> generator;

    // The start index (typically 0L).
    private final long startIndex;

    // The end index (typically generator.length () - 1L).
    private final long endIndex;

    // MUTABLE:
    // The next index to step to, or -1L if we're out of elements.
    private long nextIndex = Long.MIN_VALUE;

    // MUTABLE:
    // The previous index we stepped to, or -1L if we have not yet
    // started stepping.
    private long lastIndex = -1L;


    /**
     * <p>
     * Creates a new GeneratorIterator.
     * </p>
     *
     * @param generator The Generator whose generated elements we will
     *                  iterate over.  Can generate null elements.
     *                  Must not be null.
     *
     * @throws NullPointerException If the specified generator is null.
     */
    public GeneratorIterator (
            Generator<ELEMENT> generator
            )
        throws NullPointerException
    {
        this ( generator,                   // generator
               generator == null
               || generator.length () == 0L // start_index
                   ? -1L
                   : 0L,
               generator == null
               || generator.length () == 0L // end_index
                   ? -1L
                   : generator.length () - 1L );
    }


    /**
     * <p>
     * Creates a new GeneratorIterator.
     * </p>
     *
     * @param generator The Generator whose generated elements we will
     *                  iterate over.  Can generate null elements.
     *                  Must not be null.
     *
     * @param start_index The first index to iterate from.  Typically 0L.
     *                    Can be greater than end_index, to iterate in reverse.
     *                    Can be -1L only if the Generator is length 0L.
     *                    Must be greater than or equal to -1L.
     *                    Must be less than generator.length ().
     *
     * @param end_index The last index to iterate to.
     *                  Typically elements.length - 1L.
     *                  Can be less than start_index, to iterate in reverse.
     *                  Can be -1L only if the Generator is length 0L.
     *                  Must be greater than or equal to -1L.
     *                  Must be less than generator.length ().
     *
     * @throws NullPointerException If the specified generator is null.
     *
     * @throws IndexOutOfBoundsException If either or both of the start
     *                                   and/or end indices is/are
     *                                   less than 0L (or not -1L in the case
     *                                   of an empty Generator)
     *                                   or greater than
     *                                   or equal to generator.length ().
     */
    public GeneratorIterator (
            Generator<ELEMENT> generator,
            long start_index,
            long end_index
            )
        throws NullPointerException,
               IndexOutOfBoundsException
    {
        if ( generator == null )
        {
            throw new NullPointerException ( "ERROR Cannot create "
                                             + ClassName.of ( this.getClass () )
                                             + " with generator = null" );
        }

        final long length = generator.length ();
        if ( length == 0L )
        {
            if ( start_index != -1L
                 || end_index != -1L )
            {
                throw new IndexOutOfBoundsException ( "ERROR Cannot create "
                                                      + ClassName.of ( this.getClass () )
                                                      + " with generator = "
                                                      + generator
                                                      + " and start index = "
                                                      + start_index
                                                      + " and end index = "
                                                      + end_index );
            }
        }
        else if ( start_index < 0L
                  || start_index >= length
                  || end_index < 0L
                  || end_index >= length )
        {
            throw new IndexOutOfBoundsException ( "ERROR Cannot create "
                                                  + ClassName.of ( this.getClass () )
                                                  + " with generator = "
                                                  + generator
                                                  + " and start index = "
                                                  + start_index
                                                  + " and end index = "
                                                  + end_index );
        }

        this.generator = generator;
        this.startIndex = start_index;
        this.endIndex = end_index;

        this.nextIndex = this.startIndex;
        this.lastIndex = -1L;
    }


    /**
     * @see java.util.Iterator#hasNext()
     */
    @Override
    public final boolean hasNext ()
    {
        if ( this.nextIndex == -1L )
        {
            return false;
        }
        else
        {
            return true;
        }
    }


    /**
     * @see musaico.foundation.domains.iterators.IndexedIterator#index()
     */
    public final long index ()
    {
        return this.lastIndex;
    }



    /**
     * @see java.util.Iterator#next()
     */
    @Override
    public final ELEMENT next ()
        throws IndexOutOfBoundsException
    {
        if ( this.nextIndex < 0L )
        {
            throw new IndexOutOfBoundsException ( "ERROR no more elements"
                                                  + " to iterate over: "
                                                  + this.generator );
        }

        this.lastIndex = this.nextIndex;

        final ELEMENT element = this.generator.at ( this.nextIndex ) [ 0 ];

        if ( this.endIndex >= this.startIndex )
        {
            this.nextIndex ++;
            if ( this.nextIndex > this.endIndex )
            {
                this.nextIndex = -1L;
            }
        }
        else
        {
            this.nextIndex --;
            if ( this.nextIndex < this.endIndex )
            {
                this.nextIndex = -1L;
            }
        }

        return element;
    }


    /**
     * @see java.util.Iterator#remove()
     */
    @Override
    public final void remove ()
        throws UnsupportedOperationException
    {
        throw new UnsupportedOperationException ( ClassName.of ( this.getClass () )
                                                  + ".remove () not supported" );
    }


    /**
     * @see java.lang.Object#toString()
     */
    @Override
    public final String toString ()
    {
        final long length = this.generator.length ();

        final String maybe_index_range;
        if ( length == 0L )
        {
            maybe_index_range = "";
        }
        else if ( this.startIndex == 0L
                  && this.endIndex == ( length - 1L ) )
        {
            maybe_index_range = "";
        }
        else
        {
            maybe_index_range = " [ " + this.startIndex + " .. "
                + this.endIndex + " ]";
        }

        final String next_index = " [ " + this.nextIndex + " ]";

        return ClassName.of ( this.getClass () )
            + " "
            + this.generator
            + maybe_index_range
            + next_index;
    }
}
