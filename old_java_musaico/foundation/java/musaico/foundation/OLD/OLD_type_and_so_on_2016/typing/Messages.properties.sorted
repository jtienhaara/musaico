	//\ AbstractType,\ throw\ an\ exception.	if\ (\ java_type\ \=\=\ null	\ ||\ !\ (\ java_type\ instanceof\ ParameterizedType\ )\ )	{	\ //\ Should\ be\ impossible!	\ storage_class\ \=\ null = 	// AbstractType, throw an exception.	if ( java_type == null	 || ! ( java_type instanceof ParameterizedType ) )	{	 // Should be impossible!	 storage_class = null
Cannot\ add\ child\ type\ system\ "				\ +\ child_type_system				%]\ to\ NoTypeSystem = Cannot add child type system "				 + child_type_system				%] to NoTypeSystem
Cannot\ add\ child\ type\ system\ "				\ +\ child_type_system				%]\ with\ existing\ parent\ type\ system\ "				\ +\ child_type_system.typeSystemParent\ ()				%]\ to\ "				\ +\ this = Cannot add child type system "				 + child_type_system				%] with existing parent type system "				 + child_type_system.typeSystemParent ()				%] to "				 + this
Cannot\ add\ null\ child\ "				%]TypeSystem\ to\ "				\ +\ this = Cannot add null child "				%]TypeSystem to "				 + this
Cannot\ add\ null\ Constraint\ "					%]to\ SimpleConstraints\ set\ "					\ +\ this,					\ this = Cannot add null Constraint "					%]to SimpleConstraints set "					 + this,					 this
Cannot\ add\ null\ Type\ to\ "				\ +\ this = Cannot add null Type to "				 + this
Cannot\ add\ type\ "				\ +\ type				%]\ to\ NoTypeSystem = Cannot add type "				 + type				%] to NoTypeSystem
Cannot\ add\ type\ "				\ +\ type				%]\ with\ existing\ parent\ type\ system\ "				\ +\ type.system\ ()				%]\ to\ "				\ +\ this = Cannot add type "				 + type				%] with existing parent type system "				 + type.system ()				%] to "				 + this
Cannot\ create\ a\ second\ root\ "				%]type\ system\ for\ TypingEnvironment\ "				\ +\ environment				%]\ while\ instantiating\ a\ new\ "				%]SimpleTypeSystem = Cannot create a second root "				%]type system for TypingEnvironment "				 + environment				%] while instantiating a new "				%]SimpleTypeSystem
Cannot\ create\ a\ SimpleTypeSystem\ "				%]with\ null\ TypingEnvironment\ parent = Cannot create a SimpleTypeSystem "				%]with null TypingEnvironment parent
Cannot\ create\ "					%]SimpleTypeCastersFrom\ with\ "					%]null\ 'from'\ type = Cannot create "					%]SimpleTypeCastersFrom with "					%]null 'from' type
Cannot\ create\ "					%]SimpleTypeCastersTo\ with\ "					%]null\ 'to'\ type = Cannot create "					%]SimpleTypeCastersTo with "					%]null 'to' type
Cannot\ create\ SimpleTypeSystem\ "				\ +\ this				%]\ with\ null\ parent = Cannot create SimpleTypeSystem "				 + this				%] with null parent
Cannot\ put\ type\ caster\ "				\ +\ type_caster				%]\ from\ type\ "				\ +\ from_type				%]\ to\ type\ "				\ +\ to_type				%]\ into\ NoTypeCastersRegistry\ "				\ +\ this = Cannot put type caster "				 + type_caster				%] from type "				 + from_type				%] to type "				 + to_type				%] into NoTypeCastersRegistry "				 + this
Cannot\ register\ null\ type\ caster\ "				%]\ from\ type\ "				\ +\ this.type\ ()				%]\ to\ null\ type = Cannot register null type caster "				%] from type "				 + this.type ()				%] to null type
Cannot\ register\ null\ type\ caster\ "				%]\ to\ type\ "				\ +\ this.type\ ()				%]\ from\ null\ type = Cannot register null type caster "				%] to type "				 + this.type ()				%] from null type
Cannot\ register\ type\ caster\ "				\ +\ type_caster				%]\ from\ type\ "				\ +\ this.type\ ()				%]\ to\ null\ type = Cannot register type caster "				 + type_caster				%] from type "				 + this.type ()				%] to null type
Cannot\ register\ type\ caster\ "					\ +\ type_caster					%]\ from\ type\ "					\ +\ this.type\ ()					%]\ to\ "					\ +\ to_type					%]:\ Existing\ type\ caster\ "					\ +\ existing_type_caster = Cannot register type caster "					 + type_caster					%] from type "					 + this.type ()					%] to "					 + to_type					%]: Existing type caster "					 + existing_type_caster
Cannot\ register\ type\ caster\ "					\ +\ type_caster					%]\ to\ type\ "					\ +\ this.type\ ()					%]\ from\ "					\ +\ from_type					%]:\ Existing\ type\ caster\ "					\ +\ existing_type_caster = Cannot register type caster "					 + type_caster					%] to type "					 + this.type ()					%] from "					 + from_type					%]: Existing type caster "					 + existing_type_caster
Cannot\ register\ type\ caster\ "				\ +\ type_caster				%]\ to\ type\ "				\ +\ this.type\ ()				%]\ from\ null\ type = Cannot register type caster "				 + type_caster				%] to type "				 + this.type ()				%] from null type
Cannot\ register\ type\ class",				\ null_ex = Cannot register type class",				 null_ex
Cannot\ register\ type",				\ null_ex = Cannot register type",				 null_ex
Cannot\ register\ type",				\ null_ex = Cannot register type",				 null_ex
Cannot\ register\ type\ "				\ +\ type				%]\ for\ raw\ class\ "				\ +\ raw_class				%]\ in\ NoTypesRegistry\ "				\ +\ this = Cannot register type "				 + type				%] for raw class "				 + raw_class				%] in NoTypesRegistry "				 + this
Cannot\ set\ a\ "					%]null\ TypeExceptionHandler\ in\ "					%]SimpleTypeSystem\ "					\ +\ this = Cannot set a "					%]null TypeExceptionHandler in "					%]SimpleTypeSystem "					 + this
Cannot\ specify\ a\ null\ "					%]instance\ for\ "					%]ConstraintException\ "					\ +\ this = Cannot specify a null "					%]instance for "					%]ConstraintException "					 + this
Cannot\ validate\ null\ type\ "				%]for\ raw\ class\ [%raw_class%]\ "				%]in\ type\ system\ [%this%] = Cannot validate null type "				%]for raw class [%raw_class%] "				%]in type system [%this%]
Cannot\ validate\ type\ "				\ +\ type				%]\ with\ null\ raw\ class\ "				%]in\ type\ system\ "				\ +\ this = Cannot validate type "				 + type				%] with null raw class "				%]in type system "				 + this
Could\ not\ determine\ the\ generic\ "				%]parameterized\ class\ STORAGE_VALUE\ of\ "				%]AbstractType<STORAGE_VALUE>\ "				%]while\ trying\ to\ storageClass\ ()\ "				%]from\ "				\ +\ this				%]\ (class\ \=\ "				\ +\ this.getClass\ ()				%]\ java_type\ \=\ "				\ +\ java_type				%]\ java_type_var\ \=\ "				\ +\ java_type_var				%]\ storage_class\ \=\ "				\ +\ storage_class				%] = Could not determine the generic "				%]parameterized class STORAGE_VALUE of "				%]AbstractType<STORAGE_VALUE> "				%]while trying to storageClass () "				%]from "				 + this				%] (class = "				 + this.getClass ()				%] java_type = "				 + java_type				%] java_type_var = "				 + java_type_var				%] storage_class = "				 + storage_class				%]
Failed\ to\ create\ SimpleTypingEnvironment",					\ "cause",\ type_ex = Failed to create SimpleTypingEnvironment",					 "cause", type_ex
	\ //\ If\ we\ didn't\ throw\ a\ RuntimeTypeException,\ return\ null.	\ return\ null = 	 // If we didn't throw a RuntimeTypeException, return null.	 return null
	\ //\ If\ we\ didn't\ throw\ a\ RuntimeTypeException,\ return\ null.	\ return\ null = 	 // If we didn't throw a RuntimeTypeException, return null.	 return null
	\ //\ If\ we\ didn't\ throw\ a\ RuntimeTypeException,\ return\ null.	\ return\ null = 	 // If we didn't throw a RuntimeTypeException, return null.	 return null
	\ //\ If\ we\ didn't\ throw\ a\ RuntimeTypeException,\ return\ null.	\ return\ null = 	 // If we didn't throw a RuntimeTypeException, return null.	 return null
	\ //\ If\ we\ didn't\ throw\ a\ RuntimeTypeException,\ return\ null.	\ return\ null = 	 // If we didn't throw a RuntimeTypeException, return null.	 return null
	\ //\ If\ we\ didn't\ throw\ a\ RuntimeTypeException,\ return\ null.	\ return\ null = 	 // If we didn't throw a RuntimeTypeException, return null.	 return null
	\ //\ If\ we\ didn't\ throw\ a\ RuntimeTypeException,\ return\ null.	\ return\ null = 	 // If we didn't throw a RuntimeTypeException, return null.	 return null
		//\ If\ we\ didn't\ throw\ a\ RuntimeTypeException,\ return\ null.		return\ null = 		// If we didn't throw a RuntimeTypeException, return null.		return null
Invalid\ type\ system\ "				\ +\ type_system				%]\ for\ type\ "				\ +\ type				%]:\ Not\ a\ descendant\ of\ "				\ +\ this = Invalid type system "				 + type_system				%] for type "				 + type				%]: Not a descendant of "				 + this
NoTypeSystem\ cannot\ change\ "				%]exception\ handlers\ from\ "				\ +\ this.exceptionHandler				%]\ to\ "				\ +\ new_handler = NoTypeSystem cannot change "				%]exception handlers from "				 + this.exceptionHandler				%] to "				 + new_handler
No\ way\ of\ casting\ from\ "				\ +\ from = No way of casting from "				 + from
	\ throw\ new\ RuntimeTypeException\ (\ type_ex = 	 throw new RuntimeTypeException ( type_ex
	throw\ new\ RuntimeTypeException\ (\ type_ex = 	throw new RuntimeTypeException ( type_ex
	\ throw\ (RuntimeTypeException)\ throwable = 	 throw (RuntimeTypeException) throwable
TypeCaster\ "					\ +\ existing_from_to					%]\ already\ handles\ casts\ from\ "					\ +\ from_type					%]\ to\ "					\ +\ to_type					%].\ Cannot\ register\ type\ caster\ "					\ +\ type_caster = TypeCaster "					 + existing_from_to					%] already handles casts from "					 + from_type					%] to "					 + to_type					%]. Cannot register type caster "					 + type_caster
TypeCaster\ "					\ +\ existing_to_from					%]\ already\ handles\ casts\ to\ "					\ +\ to_type					%]\ from\ "					\ +\ from_type					%].\ Cannot\ register\ type\ caster\ "					\ +\ type_caster = TypeCaster "					 + existing_to_from					%] already handles casts to "					 + to_type					%] from "					 + from_type					%]. Cannot register type caster "					 + type_caster
Type\ for\ class\ "					\ +\ raw_class					%]\ has\ already\ been\ registered:\ "					%]previously\ registered\ type\ \=\ "					\ +\ this.registry.get\ (\ raw_class\ )					%]\ attempted\ to\ register:\ "					\ +\ type = Type for class "					 + raw_class					%] has already been registered: "					%]previously registered type = "					 + this.registry.get ( raw_class )					%] attempted to register: "					 + type
Type\ [%this					%]\ has\ already\ been\ registered\ "					%]in\ type\ system\ "					\ +\ this.typeSystem					%]\ so\ cannot\ be\ registered\ in\ "					\ +\ type_system = Type [%this					%] has already been registered "					%]in type system "					 + this.typeSystem					%] so cannot be registered in "					 + type_system
		\ //\ We'll\ throw\ an\ exception\ below.		\ storage_class\ \=\ null = 		 // We'll throw an exception below.		 storage_class = null
		//\ We'll\ throw\ an\ exception\ below.		storage_class\ \=\ null = 		// We'll throw an exception below.		storage_class = null
	\ //\ We\ will\ throw\ the\ exception\ below.	}	else	{	\ //\ Get\ the\ Java\ parameterized\ type\ X\ out\ of	\ //\ the\ AbstractType<X>\ declaration.	\ ParameterizedType\ java_ptype\ \=\ (ParameterizedType)\ java_type = 	 // We will throw the exception below.	}	else	{	 // Get the Java parameterized type X out of	 // the AbstractType<X> declaration.	 ParameterizedType java_ptype = (ParameterizedType) java_type
